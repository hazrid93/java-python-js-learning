{"version":3,"sources":["util/interact.js","alchemylogo.svg","HelloWorld.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","apiUrl","process","REACT_APP_SOCKET_API_URL","web3","createAlchemyWeb3","contractABI","helloWorldContract","eth","Contract","loadCurrentMessage","a","methods","message","call","HelloWorld","useState","walletAddress","status","setMessage","newMessage","setNewMessage","useEffect","fetchMessage","connectWalletPressed","onUpdatePressed","id","src","alchemylogo","onClick","length","String","substring","style","paddingTop","type","placeholder","onChange","e","target","value","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2jOAAAA,EAAQ,KAAUC,SAClB,IAAMC,EAASC,mIAAYC,yBAErBC,GAAOC,EADiBN,EAAQ,KAA9BM,mBACuBJ,GAEzBK,EAAcP,EAAQ,KAGfQ,EAAqB,IAAIH,EAAKI,IAAIC,SAC3CH,EAHoB,8CAOXI,EAAkB,uCAAG,4BAAAC,EAAA,sEACRJ,EAAmBK,QAAQC,UAAUC,OAD7B,cACxBD,EADwB,yBAEvBA,GAFuB,2CAAH,qDCbhB,MAA0B,wC,QCiF1BE,EArEI,WAEjB,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KACA,GADA,KAC4BD,mBAAS,KAArC,mBAAOE,EAAP,KACA,GADA,KAC8BF,mBAAS,kCAAvC,mBAAOH,EAAP,KAAgBM,EAAhB,KACA,EAAoCH,mBAAS,IAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAGAC,qBAAU,WAAM,4CACd,4BAAAX,EAAA,sEACwBD,IADxB,OACQG,EADR,OAEEM,EAAWN,GAFb,2CADc,yBAAC,WAAD,wBAKdU,KACC,IAUH,IAAMC,EAAoB,uCAAG,sBAAAb,EAAA,0FAAH,qDAIpBc,EAAe,uCAAG,sBAAAd,EAAA,0FAAH,qDAKrB,OACE,sBAAKe,GAAG,YAAR,UACE,qBAAKA,GAAG,OAAOC,IAAKC,IACpB,wBAAQF,GAAG,eAAeG,QAASL,EAAnC,SACGP,EAAca,OAAS,EACtB,cACAC,OAAOd,GAAee,UAAU,EAAG,GACnC,MACAD,OAAOd,GAAee,UAAU,IAEhC,oDAIJ,oBAAIC,MAAO,CAAEC,WAAY,QAAzB,8BACA,4BAAIrB,IAEJ,oBAAIoB,MAAO,CAAEC,WAAY,QAAzB,0BAEA,gCACE,uBACEC,KAAK,OACLC,YAAY,6CACZC,SAAU,SAACC,GAAD,OAAOjB,EAAciB,EAAEC,OAAOC,QACxCA,MAAOpB,IAET,mBAAGM,GAAG,SAAN,SAAgBR,IAEhB,wBAAQQ,GAAG,UAAUG,QAASJ,EAA9B,2B,OC9DOgB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACA,cAAC,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b5f92966.chunk.js","sourcesContent":["require('dotenv').config();\nconst apiUrl = process.env.REACT_APP_SOCKET_API_URL;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(apiUrl); \n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xB621093D85FCFa34610574823ec16C84cB1E4Bc8\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n  );\n\nexport const loadCurrentMessage = async () => { \n    const message = await helloWorldContract.methods.message().call(); \n    return message;\n};\n\nexport const connectWallet = async () => {\n  \n};\n\nexport const getCurrentWalletConnected = async () => {\n  \n};\n\nexport const updateMessage = async (address, message) => {\n  \n};\n","export default __webpack_public_path__ + \"static/media/alchemylogo.f670e5f2.svg\";","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(() => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n    fetchMessage();\n  }, []);\n\n  function addSmartContractListener() { //TODO: implement\n    \n  }\n\n  function addWalletListener() { //TODO: implement\n    \n  }\n\n  const connectWalletPressed = async () => { //TODO: implement\n    \n  };\n\n  const onUpdatePressed = async () => { //TODO: implement\n    \n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n","import HelloWorld from './HelloWorld'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <HelloWorld></HelloWorld>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}